### Simulador de Pizzas - Quantas Pedir? üçï

# Pacotes necess√°rios
begin
	using PlutoUI, Plots, Statistics, Distributions, Random
	using Printf, StatsBase
end

# T√≠tulo e introdu√ß√£o
md"""
# üçï Simulador de Pizzas: Quantas Pedir?

Este simulador usa **estat√≠stica e probabilidade** para calcular quantas pizzas voc√™ deve pedir considerando:
- Variabilidade no apetite das pessoas
- Diferentes tipos de eventos
- N√≠vel de confian√ßa desejado
- Desperd√≠cio vs falta de comida
"""

# Controles da simula√ß√£o
md"""
## üéõÔ∏è Par√¢metros do Evento

**N√∫mero de Pessoas:** $(@bind n_pessoas Slider(5:1:100, show_value=true, default=20))

**Tipo de Evento:** $(@bind tipo_evento Select([
	"casual" => "Casual (casa de amigos)", 
	"trabalho" => "Trabalho/Corporativo",
	"festa" => "Festa/Anivers√°rio",
	"criancas" => "Festa Infantil",
	"esportivo" => "Assistindo Jogo"
], default="casual"))

**Hor√°rio:** $(@bind horario Select([
	"almoco" => "Almo√ßo (12h-14h)",
	"lanche" => "Lanche (15h-17h)", 
	"jantar" => "Jantar (19h-21h)",
	"madrugada" => "Madrugada (22h+)"
], default="jantar"))

**N√≠vel de Confian√ßa:** $(@bind confianca Slider(0.80:0.05:0.99, show_value=true, default=0.90))

**H√° outras comidas?** $(@bind outras_comidas CheckBox(default=false))

**Mostrar Simula√ß√£o:** $(@bind mostrar_simulacao CheckBox(default=true))
"""

# Par√¢metros baseados no contexto
begin
	# Fatias por pessoa (m√©dia) baseado no contexto
	if tipo_evento == "casual"
		Œº_fatias = horario == "almoco" ? 3.5 : horario == "jantar" ? 4.0 : 2.5
		œÉ_fatias = 1.2
	elseif tipo_evento == "trabalho"
		Œº_fatias = horario == "almoco" ? 2.8 : 2.0
		œÉ_fatias = 0.8
	elseif tipo_evento == "festa"
		Œº_fatias = horario == "jantar" ? 4.5 : 3.5
		œÉ_fatias = 1.5
	elseif tipo_evento == "criancas"
		Œº_fatias = 2.0
		œÉ_fatias = 0.7
	elseif tipo_evento == "esportivo"
		Œº_fatias = 5.0  # Pessoal come mais assistindo jogo!
		œÉ_fatias = 1.8
	end
	
	# Ajuste se h√° outras comidas
	if outras_comidas
		Œº_fatias *= 0.7
		œÉ_fatias *= 0.8
	end
	
	# Ajuste por hor√°rio
	if horario == "madrugada"
		Œº_fatias *= 1.2  # Pessoal come mais de madrugada
	elseif horario == "lanche"
		Œº_fatias *= 0.8
	end
end

# Simula√ß√£o Monte Carlo
begin
	Random.seed!(42)
	n_sim = 10000
	
	# Simular consumo individual (distribui√ß√£o Gamma √© mais realista)
	# Gamma evita valores negativos e tem cauda longa
	Œ± = (Œº_fatias / œÉ_fatias)^2  # par√¢metro de forma
	Œ∏ = œÉ_fatias^2 / Œº_fatias    # par√¢metro de escala
	
	consumo_individual = rand(Gamma(Œ±, Œ∏), n_sim, n_pessoas)
	consumo_total = sum(consumo_individual, dims=2)[:, 1]
	
	# Converter para pizzas (8 fatias por pizza)
	fatias_por_pizza = 8
	pizzas_necessarias = consumo_total ./ fatias_por_pizza
	
	# Estat√≠sticas
	media_pizzas = mean(pizzas_necessarias)
	std_pizzas = std(pizzas_necessarias)
	quantil_pizzas = quantile(pizzas_necessarias, confianca)
	
	# Recomenda√ß√£o (sempre arredondar para cima)
	pizzas_recomendadas = ceil(Int, quantil_pizzas)
	
	# Probabilidade de sobrar vs faltar
	prob_sobrar = mean(pizzas_necessarias .<= pizzas_recomendadas)
	prob_faltar = 1 - prob_sobrar
end

# Gr√°fico da distribui√ß√£o
begin
	if mostrar_simulacao
		hist_plot = histogram(pizzas_necessarias, bins=30, alpha=0.7, 
			color=:orange, normalize=:probability,
			title="Distribui√ß√£o de Pizzas Necess√°rias\n($n_pessoas pessoas, $tipo_evento, $horario)",
			xlabel="N√∫mero de Pizzas", ylabel="Probabilidade",
			legend=false)
		
		# Linha da m√©dia
		vline!(hist_plot, [media_pizzas], color=:blue, linewidth=3, 
			label="M√©dia", linestyle=:dash)
		
		# Linha da recomenda√ß√£o
		vline!(hist_plot, [pizzas_recomendadas], color=:red, linewidth=3,
			label="Recomenda√ß√£o")
		
		# √Årea de confian√ßa
		√°rea_confian√ßa = pizzas_necessarias .<= pizzas_recomendadas
		if sum(√°rea_confian√ßa) > 0
			histogram!(hist_plot, pizzas_necessarias[√°rea_confian√ßa], 
				bins=30, alpha=0.5, color=:green, normalize=:probability)
		end
		
		hist_plot
	else
		plot(title="Ative 'Mostrar Simula√ß√£o' para ver o gr√°fico", 
			showaxis=false, grid=false, legend=false)
	end
end

# Resultados principais
md"""
## üéØ Resultado da Simula√ß√£o

### Recomenda√ß√£o Principal:
# **$(pizzas_recomendadas) pizzas** üçï

### Estat√≠sticas Detalhadas:
- **M√©dia esperada:** $(round(media_pizzas, digits=2)) pizzas
- **Desvio padr√£o:** $(round(std_pizzas, digits=2)) pizzas  
- **N√≠vel de confian√ßa:** $(round(confianca*100, digits=1))%
- **Probabilidade de sobrar:** $(round(prob_sobrar*100, digits=1))%
- **Probabilidade de faltar:** $(round(prob_faltar*100, digits=1))%

### Consumo M√©dio Estimado:
- **Por pessoa:** $(round(Œº_fatias, digits=1)) fatias
- **Total:** $(round(Œº_fatias * n_pessoas, digits=1)) fatias
- **Equivale a:** $(round(Œº_fatias * n_pessoas / 8, digits=1)) pizzas
"""

# An√°lise de sensibilidade
begin
	# Testar diferentes n√∫meros de pizzas
	pizzas_teste = (pizzas_recomendadas-2):(pizzas_recomendadas+3)
	pizzas_teste = pizzas_teste[pizzas_teste .> 0]
	
	resultados = []
	for p in pizzas_teste
		fatias_dispon√≠veis = p * fatias_por_pizza
		prob_suficiente = mean(consumo_total .<= fatias_dispon√≠veis)
		prob_desperdicio = mean(consumo_total .< fatias_dispon√≠veis * 0.8)
		push!(resultados, (p, prob_suficiente, prob_desperdicio))
	end
	
	# Gr√°fico de an√°lise
	pizzas_vals = [r[1] for r in resultados]
	prob_suficiente_vals = [r[2] for r in resultados]
	prob_desperdicio_vals = [r[3] for r in resultados]
	
	analise_plot = plot(pizzas_vals, prob_suficiente_vals * 100, 
		marker=:circle, linewidth=3, color=:green,
		label="Probabilidade de Ser Suficiente", 
		title="An√°lise de Sensibilidade",
		xlabel="N√∫mero de Pizzas", ylabel="Probabilidade (%)",
		ylim=(0, 100), legend=:right)
	
	plot!(analise_plot, pizzas_vals, prob_desperdicio_vals * 100,
		marker=:square, linewidth=3, color=:red,
		label="Probabilidade de Muito Desperd√≠cio")
	
	# Linha da recomenda√ß√£o
	vline!(analise_plot, [pizzas_recomendadas], color=:blue, 
		linewidth=2, linestyle=:dash, label="Recomenda√ß√£o")
	
	analise_plot
end

# Tabela de cen√°rios
md"""
## üìä Tabela de Cen√°rios

| Pizzas | Prob. Suficiente | Prob. Desperd√≠cio | Recomenda√ß√£o |
|--------|------------------|-------------------|--------------|
$(join([
	"| $(r[1]) | $(round(r[2]*100, digits=1))% | $(round(r[3]*100, digits=1))% | $(r[1] == pizzas_recomendadas ? "‚úÖ **√ìtimo**" : r[2] < 0.8 ? "‚ö†Ô∏è Arriscado" : r[3] > 0.3 ? "üí∏ Muito desperd√≠cio" : "üëç Razo√°vel") |"
	for r in resultados
], "\n"))
"""

# Dicas adicionais
md"""
## üí° Dicas Estat√≠sticas e Pr√°ticas

### Como Funciona a Simula√ß√£o:
1. **Distribui√ß√£o Gamma**: Modela o consumo individual (sempre positivo, com cauda longa)
2. **Monte Carlo**: Simula $(n_sim) cen√°rios diferentes
3. **Quantil**: Usa o percentil $(round(confianca*100))% para a recomenda√ß√£o

### Fatores Considerados:
- **Tipo de evento**: $(tipo_evento) (afeta apetite m√©dio)
- **Hor√°rio**: $(horario) (influencia fome)
- **Outras comidas**: $(outras_comidas ? "Sim" : "N√£o") (reduz consumo de pizza)
- **Variabilidade**: Pessoas comem diferente (œÉ = $(round(œÉ_fatias, digits=1)))

### Interpreta√ß√£o dos Resultados:
$(if prob_faltar < 0.05
	"üü¢ **Baixo risco**: Chance muito pequena de faltar pizza"
elseif prob_faltar < 0.15
	"üü° **Risco moderado**: Pequena chance de faltar, mas controlada"
else
	"üî¥ **Alto risco**: Considere pedir mais pizzas ou aumentar n√≠vel de confian√ßa"
end)

$(if prob_desperdicio_vals[findfirst(x -> x == pizzas_recomendadas, pizzas_vals)] > 0.4
	"üí∏ **Aten√ß√£o**: Alto risco de desperd√≠cio significativo"
else
	"üíö **Equilibrado**: Boa rela√ß√£o entre sufici√™ncia e desperd√≠cio"
end)

### Para Eventos Especiais:
- **Reuni√£o importante**: Use confian√ßa ‚â• 95%
- **Or√ßamento apertado**: Use confian√ßa ‚âà 85%
- **Sobra √© ok**: Use confian√ßa ‚â• 95%
- **Quer ser exato**: Use confian√ßa ‚âà 80%
"""